/**
 * CSS Custom Properties ÁÆ°ÁêÜHook
 * 
 * ÈÄèÊòé„Éë„É¨„ÉÉ„Éà„Ç∑„Çπ„ÉÜ„É†„ÅÆCSSÂ§âÊï∞„ÇíÂãïÁöÑ„Å´Âà∂Âæ°„Åó„ÄÅ
 * „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú„Å®Á≤æÂØÜ„Å™ÂÄ§ÁÆ°ÁêÜ„ÇíÊèê‰æõ
 */

import { useEffect, useCallback } from 'react';
import { 
  TRANSPARENT_PALETTE_SYSTEM, 
  CSS_VARIABLES, 
  LEGACY_COMPATIBILITY 
} from '../constants/roulette';

/**
 * „Éá„Éê„Ç§„ÇπÁ®ÆÂà•„ÅÆÂà§ÂÆöÁµêÊûú
 */
type DeviceType = 'mobile' | 'desktop';

/**
 * „Éë„É¨„ÉÉ„ÉàCSSË®≠ÂÆö„ÅÆInterface
 */
interface PaletteConfig {
  bottleOpenerWidth: number;
  paletteSize: number;
  paletteRadius: number;
  scaleRatio: number;
}

/**
 * ÈÄèÊòé„Éë„É¨„ÉÉ„Éà„Ç∑„Çπ„ÉÜ„É†Áî®CSS Custom PropertiesÁÆ°ÁêÜHook
 * 
 * Ê©üËÉΩ:
 * - „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú„Åß„ÅÆCSSÂ§âÊï∞Ëá™ÂãïÊõ¥Êñ∞
 * - Á≤æÂØÜ„Å™ÂÄ§Ë®àÁÆó„Å®„Éñ„É©„Ç¶„Ç∂ÊúÄÈÅ©Âåñ
 * - „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„Åß„ÅÆË©≥Á¥∞„É≠„Ç∞Âá∫Âäõ
 * - „É¨„Ç¨„Ç∑„Éº„Ç∑„Çπ„ÉÜ„É†„Å®„ÅÆ‰∫íÊèõÊÄß‰øùÊåÅ
 * 
 * @returns CSSÂ§âÊï∞Âà∂Âæ°Áî®„ÅÆÈñ¢Êï∞„Å®„Éá„Éê„Ç§„ÇπÊÉÖÂ†±
 */
export const usePaletteCSS = () => {
  /**
   * ÁèæÂú®„ÅÆ„Éá„Éê„Ç§„ÇπÁ®ÆÂà•„ÇíÂà§ÂÆö
   */
  const getDeviceType = useCallback((): DeviceType => {
    // Server-side rendering „Åß„ÅØ mobile „Çí„Éá„Éï„Ç©„É´„Éà„Å®„Åô„Çã
    if (typeof window === 'undefined') return 'mobile';
    return window.innerWidth >= CSS_VARIABLES.MOBILE_BREAKPOINT ? 'desktop' : 'mobile';
  }, []);

  /**
   * „Éá„Éê„Ç§„ÇπÂà•„ÅÆ„Éë„É¨„ÉÉ„ÉàË®≠ÂÆö„ÇíÂèñÂæó
   */
  const getPaletteConfig = useCallback((deviceType: DeviceType): PaletteConfig => {
    const config = deviceType === 'mobile' 
      ? TRANSPARENT_PALETTE_SYSTEM.MOBILE 
      : TRANSPARENT_PALETTE_SYSTEM.DESKTOP;
    
    return {
      bottleOpenerWidth: config.BOTTLE_OPENER_WIDTH,
      paletteSize: config.PALETTE_SIZE,
      paletteRadius: config.PALETTE_RADIUS,
      scaleRatio: config.SCALE_RATIO,
    };
  }, []);

  /**
   * CSS Custom Properties „ÇíÊõ¥Êñ∞
   */
  const updateCSSVariables = useCallback((config: PaletteConfig) => {
    // Server-side rendering „Åß„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
    if (typeof document === 'undefined') return;
    const root = document.documentElement;
    
    // Á≤æÂØÜ„Å™ÂÄ§„ÅßCSSÂ§âÊï∞„ÇíË®≠ÂÆö
    root.style.setProperty(
      CSS_VARIABLES.BOTTLE_OPENER_WIDTH, 
      CSS_VARIABLES.formatCSSValue(config.bottleOpenerWidth)
    );
    
    root.style.setProperty(
      CSS_VARIABLES.PALETTE_SIZE, 
      CSS_VARIABLES.formatCSSValue(config.paletteSize)
    );
    
    root.style.setProperty(
      CSS_VARIABLES.PALETTE_RADIUS, 
      CSS_VARIABLES.formatCSSValue(config.paletteRadius)
    );
    
    root.style.setProperty(
      CSS_VARIABLES.SCALE_RATIO, 
      CSS_VARIABLES.formatCSSRatio(config.scaleRatio)
    );

    // „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„Åß„ÅÆË©≥Á¥∞„É≠„Ç∞
    if (LEGACY_COMPATIBILITY.DEBUG_MODE && LEGACY_COMPATIBILITY.ENABLE_PRECISION_LOGGING) {
      console.log('üéØ Palette CSS Variables Updated:', {
        bottleOpenerWidth: CSS_VARIABLES.formatCSSValue(config.bottleOpenerWidth),
        paletteSize: CSS_VARIABLES.formatCSSValue(config.paletteSize),
        paletteRadius: CSS_VARIABLES.formatCSSValue(config.paletteRadius),
        scaleRatio: CSS_VARIABLES.formatCSSRatio(config.scaleRatio),
      });
    }
  }, []);

  /**
   * „É¨„Çπ„Éù„É≥„Ç∑„ÉñÊõ¥Êñ∞Âá¶ÁêÜ
   */
  const handleResize = useCallback(() => {
    if (!LEGACY_COMPATIBILITY.ENABLE_TRANSPARENT_PALETTE) {
      return; // Êñ∞„Ç∑„Çπ„ÉÜ„É†„ÅåÁÑ°Âäπ„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
    }

    const deviceType = getDeviceType();
    const config = getPaletteConfig(deviceType);
    updateCSSVariables(config);
  }, [getDeviceType, getPaletteConfig, updateCSSVariables]);

  /**
   * ÊâãÂãï„ÅßCSSÂ§âÊï∞„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
   * „Éá„Éê„ÉÉ„Ç∞„ÇÑÂãïÁöÑË™øÊï¥ÊôÇ„Å´‰ΩøÁî®
   */
  const forceUpdateCSS = useCallback((rouletteSize?: number) => {
    if (rouletteSize) {
      // „Ç´„Çπ„Çø„É†„Çµ„Ç§„Ç∫„Åß„ÅÆÂãïÁöÑË®àÁÆó
      const customConfig: PaletteConfig = {
        bottleOpenerWidth: TRANSPARENT_PALETTE_SYSTEM.calculateBottleOpenerWidth(rouletteSize),
        paletteSize: TRANSPARENT_PALETTE_SYSTEM.calculatePaletteSize(rouletteSize),
        paletteRadius: TRANSPARENT_PALETTE_SYSTEM.calculatePaletteRadius(rouletteSize),
        scaleRatio: TRANSPARENT_PALETTE_SYSTEM.calculateScaleRatio(rouletteSize),
      };
      updateCSSVariables(customConfig);
    } else {
      // Ê®ôÊ∫ñ„ÅÆ„É¨„Çπ„Éù„É≥„Ç∑„ÉñÊõ¥Êñ∞
      handleResize();
    }
  }, [handleResize, updateCSSVariables]);

  /**
   * ÂàùÊúüÂåñ„Å®„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÁôªÈå≤
   */
  useEffect(() => {
    if (!LEGACY_COMPATIBILITY.ENABLE_TRANSPARENT_PALETTE) {
      if (LEGACY_COMPATIBILITY.DEBUG_MODE) {
        console.log('‚ö†Ô∏è Transparent Palette System is disabled');
      }
      return;
    }

    // ÂàùÊúüË®≠ÂÆö
    handleResize();

    // Client-side „ÅÆ„Åø„Åß„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÁôªÈå≤
    if (typeof window !== 'undefined') {
      // „É™„Çµ„Ç§„Ç∫„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÁôªÈå≤
      window.addEventListener('resize', handleResize);
      
      // „Ç™„É™„Ç®„É≥„ÉÜ„Éº„Ç∑„Éß„É≥Â§âÊõ¥ÂØæÂøú („É¢„Éê„Ç§„É´)
      window.addEventListener('orientationchange', handleResize);
    }

    if (LEGACY_COMPATIBILITY.DEBUG_MODE) {
      console.log('üöÄ Transparent Palette CSS system initialized');
    }

    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('resize', handleResize);
        window.removeEventListener('orientationchange', handleResize);
      }
      
      if (LEGACY_COMPATIBILITY.DEBUG_MODE) {
        console.log('üßπ Palette CSS system cleaned up');
      }
    };
  }, [handleResize]);

  // Hook „ÅÆÊàª„ÇäÂÄ§
  return {
    forceUpdateCSS,
    getDeviceType,
    getPaletteConfig,
    currentDeviceType: getDeviceType(),
    isTransparentPaletteEnabled: LEGACY_COMPATIBILITY.ENABLE_TRANSPARENT_PALETTE,
  };
};